version: "3.9"
networks:
  kafka-net:
    name: kafka-net
    driver: bridge

services:
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"

  postgres_users:
    image: postgres:15.3
    container_name: who_users_db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=who_users_db
    volumes:
      - postgres_users:/data/postgres_users
      - ./create_who_users_db.sql:/docker-entrypoint-initdb.d/create_who_users_db.sql
    restart: always

  postgres_user:
    image: postgres:15.3
    container_name: user_db
    ports:
      - "5480:5480"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=user_db
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./created_user_db.sql:/docker-entrypoint-initdb.d/create_user_db.sql
    networks:
      - postgres_user
    restart: always

  postgres_message:
    image: postgres:15.3
    container_name: who_message_db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=who_message_db
    volumes:
      - postgres_message:/data/postgres_message
      - ./create_who_message_db.sql:/docker-entrypoint-initdb.d/create_who_message_db.sql
    restart: always

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=root

  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - users-service
      - gateway-service

  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "2181:2181"

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      depends_on:
      -zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"

  discovery-service:
    container_name: discovery-service
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    ports:
      - "8761:8761"

  gateway-service:
    container_name: gateway-service
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    ports:
      - "8222:8222"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-service
      - zipkin
      
  users-service:
    container_name: users-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8070:8070"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres_users
      - discovery-service
      - gateway-service
      - zipkin
      
volumes:
  postgres_users:
  postgres_message:
  pgdata:
